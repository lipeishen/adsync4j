import org.gradle.api.internal.project.ProjectInternal

import static org.adsync4j.gradle.Projects.systemTesting

Project prj = project

// in order to have implicit tasks initialized in every project
prj.rootProject.subprojects.each {
    prj.evaluationDependsOn(it.path)
}

systemTesting.tasks.create(
        description: 'Runs system tests against the real infrastructure.',
        name: 'testAgainstRealActiveDirectory',
        type: Test) { Test testTask ->
    def dir = "${prj.rootProject.rootDir.absolutePath}/unversioned/systemTest"
    testTask.jvmArgs([
            '-Dspring.profiles.active=realActiveDirectory',
            "-DadPropertiesLocation=file://$dir/active-directory.properties",
            "-DtestFixtures=file://$dir/testFixtures.groovycfg",
    ])
}

prj.rootProject.tasks.create(
        description: 'Creates a directory structure corresponding to the projects\' existing tasks. ' +
                'Useful to implement a poor man\'s shell completion for task names.',
        name: 'taskDirs') { Task task ->
    def tasksBaseDir = prj.rootProject.file('gradle/tasks')
    tasksBaseDir.deleteDir()

    prj.rootProject.allprojects.each {
        def prjTaskBaseDir = new File(tasksBaseDir, it.path.substring(1))

        // collect all tasks including implicit ones as well (like 'dependencies', 'tasks')
        def allTasks = [* it.tasks.collect(), * (it as ProjectInternal).implicitTasks.collect()]

        allTasks.each { Task t ->
            new File(prjTaskBaseDir, t.name).mkdirs()
        }
    }
}

prj.rootProject.tasks.create(
        description: 'Removes the task directory structure.',
        name: 'cleanTaskDirs') { Task task ->
    task.doLast {
        prj.rootProject.file('gradle/tasks').deleteDir()
    }
}
