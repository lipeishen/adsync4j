/*******************************************************************************
 * ADSync4J (https://github.com/zagyi/adsync4j)
 *
 * Copyright (c) 2013 Balazs Zagyvai
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Balazs Zagyvai
 ******************************************************************************/
import org.adsync4j.gradle.IdeaUtils

def unitTestSrcRoot = 'test-unit'
def integrationTestSrcRoot = 'test-integration'

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    setSourceDirs(test, unitTestSrcRoot)
    setSourceDirs(integrationTest, integrationTestSrcRoot)
}

idea {
    IdeaUtils.checkIfJavaPluginHasAlreadyBeenAppliedAtThisPoint(this)
    module.scopes.TEST.plus += configurations.integrationTestRuntime
    module.testSourceDirs += sourceSets.integrationTest.allSource.srcDirs
}

configurations {
    integrationTestCompile.extendsFrom(compile)
    integrationTestRuntime.extendsFrom(testRuntime)
}

dependencies {
    integrationTestCompile([
            configurations.compile,
            configurations.testCompile,
    ])

    integrationTestRuntime([
            configurations.testRuntime,
    ])
}

task integrationTest(type: Test, dependsOn: jar) {
    classpath = sourceSets.integrationTest.runtimeClasspath
    testClassesDir = sourceSets.integrationTest.output.classesDir
    testReportDir = file("${reporting.baseDir}/integration-tests")
}

check.dependsOn integrationTest

/**
 * Sets the {@code java}, {@code groovy}, and {@code resources} source directories on the source set by deriving the
 * respective directories from the specified source "root" directory.
 * <p>
 * E.g. {@code setSourceDirs (main,'myMain')} is equivalent to:
 * <pre>
 * sourceSets &#123;
 *     main.java.srcDirs = [file('src/myMain/java')]
 *     main.groovy.srcDirs = [file('src/myMain/groovy')]
 *     main.resources.srcDirs = [file('src/myMain/resources')]
 * &#125;
 * </pre>
 * @param sourceSet The SourceSet instance to operate on.
 * @param srcSetRoot Name of the folder under {@code /src} that contains the various source folders for the given SourceSet.
 */
def setSourceDirs(sourceSet, srcSetRoot) {
    ['java', 'groovy', 'resources'].each { srcDirType ->
        def srcDir = srcDir(srcSetRoot, srcDirType)
        if (srcDir.isDirectory())
            sourceSet."$srcDirType".srcDirs = [srcDir]
    }
}

def srcDir(srcSetRoot, srcDirType) {
    file("src/$srcSetRoot/$srcDirType")
}
