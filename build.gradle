/*******************************************************************************
 * ADSync4J (https://github.com/zagyi/adsync4j)
 *
 * Copyright (c) 2013 Balazs Zagyvai
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Balazs Zagyvai
 ***************************************************************************** */

import org.adsync4j.gradle.Projects

import static org.adsync4j.gradle.GradleIdeaIntegrationHelper.addGradleAsDependency
import static org.adsync4j.gradle.GradleUtils.javaPlugin
import static org.adsync4j.gradle.GradleUtils.runUserScript
import static org.adsync4j.gradle.IdeaUtils.sortDependenciesByScopeInIntelliJ
import static org.adsync4j.gradle.Projects.*

Project rootPrj = project
Projects.init(rootPrj)

// run an optional user script to allow developers to add build logic that is
// specific to their environment and that is executed before the main build script
runUserScript(rootPrj, 'init')

rootPrj.apply from: "$rootPrj.rootDir/gradle/pom.gradle"

rootPrj.with {
    allprojects.each { prj ->
        prj.with {
            apply plugin: 'groovy'
            apply plugin: 'idea'
            apply from: "$rootPrj.rootDir/gradle/providedConfiguration.gradle"

            group = 'org.adsync4j'
            version = "0.1.1-SNAPSHOT"

            javaPlugin(prj).sourceCompatibility = 1.7
            javaPlugin(prj).targetCompatibility = 1.7

            if (prj != buildSrc) {
                prj.dependencies.add('provided', buildSrc)
            }

            configurations.all {
                it.exclude group: 'commons-logging'
            }

            repositories.with {
                add(mavenLocal())
                add(mavenCentral())
            }
        }

        sortIdeaDependencies(prj)
        addGradleAsDependency(prj)
        customizeTestTasks(prj)
    }
}

// set up publishing to maven repository for selected projects
[core, unboundidClient].each { mavenPrj ->
    mavenPrj.with {
        apply plugin: 'maven'

        // by default the install task depends on the jar task, which won't trigger test execution
        tasks['install'].dependsOn(tasks['build'])

        def createSourcesJarTask =
            tasks.create(name: 'createSourcesJar', type: Jar) { Jar jarTask ->
                jarTask.classifier = 'sources'
                def mainSourceSet = javaPlugin(mavenPrj).sourceSets['main']
                jarTask.from(mainSourceSet.allSource)
            }

        def createJavadocJarTask =
            tasks.create(name: 'createJavadocJar', type: Jar) { Jar jarTask ->
                jarTask.dependsOn(tasks['javadoc'])
                jarTask.classifier = 'javadoc'
                jarTask.from('build/docs/javadoc')
            }

        artifacts.add('archives', createSourcesJarTask)
        artifacts.add('archives', createJavadocJarTask)
    }
}

boolean isSnapshotVersion(Project prj) {
    (prj.version as String).endsWith('-SNAPSHOT')
}

def customizeTestTasks(Project prj) {
    prj.tasks.withType(Test) { Test test ->
        // optionally start the test jvm with a debugger attached
        if (System.getProperty('attachDebugger') != null) {
            test.jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005'
        }
        // propagate system properties from Gradle JVM to the forked test JVM
        test.systemProperties = System.getProperties() as Map<String, ?>
    }
}

rootPrj.tasks.create(name: 'wrapper', type: Wrapper) { Wrapper wrapper ->
    wrapper.gradleVersion = '1.7'
}

// run an optional user script to allow developers to add build logic that is
// specific to their environment and that is executed after the main build script
runUserScript(rootPrj)
