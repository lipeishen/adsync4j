/*******************************************************************************
 * ADSync4J (https://github.com/zagyi/adsync4j)
 *
 * Copyright (c) 2013 Balazs Zagyvai
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Balazs Zagyvai
 ***************************************************************************** */
import org.adsync4j.gradle.Libs
import org.adsync4j.gradle.Projects

import static org.adsync4j.gradle.GradleUtils.addDependencies
import static org.adsync4j.gradle.GroovyUtils.returnAfterClosure

Project prj = project

def unboundidClient_noLdapSdk = prj.dependencies.create(Projects.unboundidClient) {
    ModuleDependency dependency ->
        dependency.exclude group: 'com.unboundid', module: 'unboundid-ldapsdk'
}

addDependencies(prj, [
        testCompile: [
                Libs.groovy,
                Libs.hamcrest,
                Libs.spock,
                Libs.spockSpring,
                Libs.springTest,
                Libs.springContext,
                Projects.core,
                Projects.testUtils,
                unboundidClient_noLdapSdk,
                prj.files("lib/unboundid-ldapsdk-2.3.3-nonsealed.jar"),
        ],

        testRuntime: [
                Libs.slf4jBridgeJUL,
                Libs.slf4jBridgeJCL,
        ],
])

//SourceSetContainer sourceSets = prj.sourceSets
//def test = sourceSets['test']
//test.compileClasspath = reorderProjectResourcesBeforeExternalFiles(test.compileClasspath, prj)
//test.runtimeClasspath = reorderProjectResourcesBeforeExternalFiles(test.runtimeClasspath, prj)

prj.tasks.create(name: 'testAgainstRealActiveDirectory', type: Test) { Test testTask ->
    testTask.jvmArgs '-Dspring.profiles.active=realActiveDirectory'
}

// normal test task performs system test against an in-memory ldap server that's mocking the behavior of a real Active Directory
prj.tasks['test'].configure { Test testTask ->
    def propertiesResolver = createPropertiesResolver(testTask)

    def propertiesFileLocation = propertiesResolver.springConformPropertiesFileReference
    def highestCommittedUSN = propertiesResolver['adRootDse.highestCommittedUSN']
    def dsServiceName = propertiesResolver['adRootDse.dsServiceName']

    def testJvmArgs = [
            '-Dspring.profiles.active=inMemoryLdapServer',
            "-DinMemoPropertiesLocation=$propertiesFileLocation",
            "-DadRootDse.highestCommittedUSN=$highestCommittedUSN",
            "-DadRootDse.dsServiceName=$dsServiceName",
    ]

    prj.logger.with {
        debug('Invoking test executing JVM with the following additional system properties:')
        testJvmArgs.each { debug(it) }
    }

    testTask.jvmArgs(testJvmArgs)
}

static def createPropertiesResolver(Test testTask) {
    def userProvidedPropertiesFileLocation = testTask.systemProperties['inMemoPropertiesLocation']
    userProvidedPropertiesFileLocation ?
        new UserProvidedPropertiesFileStrategy(userProvidedPropertiesFileLocation) :
        new DefaultPropertiesFileStrategy(testTask.project)
}

abstract class InMemoryLdapServerPropertiesResolver {
    @Lazy Properties properties = {
        returnAfterClosure(new Properties()) { result ->
            propertiesFile.withInputStream { stream -> result.load(stream) }
        }
    }()

    abstract File getPropertiesFile()

    abstract String getSpringConformPropertiesFileReference()

    def getAt(String propertyName) {
        returnAfterClosure(properties[propertyName]) { propertyValue ->
            assert propertyValue, "property '$propertyName' not found in properties file: $springConformPropertiesFileReference"
        }
    }
}

class UserProvidedPropertiesFileStrategy extends InMemoryLdapServerPropertiesResolver {
    final String userProvidedPropertiesFileLocation

    UserProvidedPropertiesFileStrategy(userProvidedPropertiesFileLocation) {
        this.userProvidedPropertiesFileLocation = userProvidedPropertiesFileLocation
    }

    @Override
    File getPropertiesFile() {
        def propertiesFile = new File(userProvidedPropertiesFileLocation)
        assert propertiesFile.exists(), "Could not find file: $userProvidedPropertiesFileLocation"
        propertiesFile
    }

    @Override
    String getSpringConformPropertiesFileReference() {
        "file://$userProvidedPropertiesFileLocation"
    }
}

class DefaultPropertiesFileStrategy extends InMemoryLdapServerPropertiesResolver {
    static final def DEFAULT_PROPERTIES_RESOURCE = 'org/adsync4j/impl/in-memory-ldap.properties'
    final Project prj

    public DefaultPropertiesFileStrategy(Project prj) {
        this.prj = prj
    }

    @Override
    File getPropertiesFile() {
        prj.file("src/test/resources/$DEFAULT_PROPERTIES_RESOURCE")
    }

    @Override
    String getSpringConformPropertiesFileReference() {
        "classpath:/$DEFAULT_PROPERTIES_RESOURCE"
    }
}
